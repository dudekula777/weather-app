name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # -------------------------
  # 1. Code Quality & Testing
  # -------------------------
  code-quality:
    runs-on: ubuntu-latest
    environment: development
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      - run: npm ci
      - run: npm run test:coverage
      - uses: SonarSource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=dudekula777_weather-app
            -Dsonar.organization=dudekula777
            -Dsonar.projectName=weather-app
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
      - uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: coverage/

  # -------------------------
  # 2. Build & Push Docker Image
  # -------------------------
  build-and-push:
    runs-on: ubuntu-latest
    needs: code-quality
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    outputs:
      image_tag: ${{ steps.set_tag.outputs.image_tag }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}
      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha
            type=ref,event=branch
      - id: set_tag
        run: echo "image_tag=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT
      - uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # -------------------------
  # 3. Deploy to Kubernetes
  # -------------------------
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        run: terraform init -input=false
        working-directory: ./infra/terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

      - name: Terraform Apply & Capture IP
        working-directory: ./infra/terraform
        run: |
          set -euo pipefail
          terraform apply -auto-approve -input=false
          IP=$(terraform output -raw instance_public_ip | tr -d '\r\n')
          echo "INSTANCE_IP=$IP" >> $GITHUB_ENV
          echo "âœ… EC2 Public IP: $IP"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/my-ec2-key.pem
          chmod 600 ~/.ssh/my-ec2-key.pem

      - name: Test SSH
        run: ssh -o StrictHostKeyChecking=no -i ~/.ssh/my-ec2-key.pem ubuntu@$INSTANCE_IP "echo 'SSH OK' && hostname && uptime"

      - name: Setup kubeconfig
        run: |
          mkdir -p ~/.kube
          scp -o StrictHostKeyChecking=no -i ~/.ssh/my-ec2-key.pem ubuntu@$INSTANCE_IP:~/.kube/config ~/.kube/config

      - name: Ensure namespace
        run: kubectl create ns weather-app || true

      - name: Deploy to Kubernetes
        env:
          IMAGE_TAG: ${{ needs.build-and-push.outputs.image_tag }}
        run: |
          kubectl set image deployment/weather-app-deployment weather-app=$IMAGE_TAG -n weather-app
          kubectl rollout status deployment/weather-app-deployment -n weather-app --timeout=90s
          kubectl get svc -n weather-app

  # -------------------------
  # 4. Notifications
  # -------------------------
  notify:
    runs-on: ubuntu-latest
    needs: [code-quality, build-and-push, deploy]
    if: always()
    steps:
      - uses: 8398a7/action-slack@v4
        with:
          status: ${{ job.status }}
          channel: '#ci-cd-notifications'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
