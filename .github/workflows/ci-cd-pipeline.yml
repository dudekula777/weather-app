name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 1. Code Quality
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - run: npm ci
      - run: npm run test:coverage
      - uses: SonarSource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      - uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: coverage/

  # 2. Build & Push Docker
  build:
    runs-on: ubuntu-latest
    needs: code-quality
    outputs:
      image_tag: ${{ steps.tag.outputs.image_tag }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}
      - id: tag
        run: echo "image_tag=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
      - uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ steps.tag.outputs.image_tag }}

  # 3. Deploy
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform Apply
        working-directory: ./infra/terraform
        run: |
          terraform init -no-color
          terraform apply -auto-approve -no-color
          echo "INSTANCE_IP=$(terraform output -raw instance_public_ip | tr -d '\r\n')" >> $GITHUB_ENV

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Fetch kubeconfig
        run: |
          mkdir -p ~/.kube
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa \
            ubuntu@$INSTANCE_IP:/etc/rancher/k3s/k3s.yaml ~/.kube/config
          sed -i "s/127.0.0.1/$INSTANCE_IP/" ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Verify Cluster
        run: kubectl get nodes --kubeconfig ~/.kube/config

      - name: Deploy App
        env:
          IMAGE_TAG: ${{ needs.build.outputs.image_tag }}
        run: |
          kubectl set image deployment/weather-app-deployment \
            weather-app=$IMAGE_TAG -n weather-app --kubeconfig ~/.kube/config
          kubectl rollout status deployment/weather-app-deployment -n weather-app --timeout=120s --kubeconfig ~/.kube/config
          kubectl get svc -n weather-app --kubeconfig ~/.kube/config

  # 4. Notify
  notify:
    runs-on: ubuntu-latest
    needs: [code-quality, build, deploy]
    if: always()
    steps:
      - uses: 8398a7/action-slack@v4
        with:
          status: ${{ job.status }}
          channel: '#ci-cd-notifications'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
