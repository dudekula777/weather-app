name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # -------------------------
  # Code Quality & Testing
  # -------------------------
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=dudekula777_weather-app
            -Dsonar.organization=dudekula777
            -Dsonar.projectName=weather-app
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: coverage/

  # -------------------------
  # Build & Push Docker Image
  # -------------------------
  build-and-push:
    runs-on: ubuntu-latest
    needs: code-quality
    outputs:
      image_tag: ${{ steps.set_tag.outputs.image_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}

      - id: set_tag
        run: |
          echo "image_tag=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.set_tag.outputs.image_tag }}

  # -------------------------
  # Deploy to Kubernetes
  # -------------------------
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup Terraform
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1

      - name: Terraform Apply & Capture EC2 IP
        run: |
          terraform apply -auto-approve
          IP=$(terraform output -raw instance_public_ip | tr -d '\r\n')
          echo "INSTANCE_IP=$IP" >> $GITHUB_ENV
          echo "EC2 Public IP: $IP"
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
          TF_VAR_public_key: ${{ secrets.EC2_PUBLIC_KEY }}

      # Setup SSH key
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > ~/.ssh/my-ec2-key.pem
          chmod 600 ~/.ssh/my-ec2-key.pem

      # SSH test
      - name: Test SSH
        shell: bash
        run: |
          echo "Connecting to $INSTANCE_IP..."
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/my-ec2-key.pem ubuntu@$INSTANCE_IP \
            "echo 'SSH connection successful!' && hostname && uptime"

      # Copy kubeconfig
      - name: Setup kubeconfig
        run: |
          mkdir -p ~/.kube
          scp -o StrictHostKeyChecking=no -i ~/.ssh/my-ec2-key.pem \
            ubuntu@$INSTANCE_IP:/etc/rancher/k3s/k3s.yaml ~/.kube/config
          sed -i "s/127.0.0.1/$INSTANCE_IP/" ~/.kube/config
          chmod 600 ~/.kube/config
          kubectl config view
          kubectl config current-context

      # Deploy Docker image to Kubernetes
      - name: Deploy to Kubernetes
        env:
          IMAGE_TAG: ${{ needs.build-and-push.outputs.image_tag }}
        run: |
          kubectl set image deployment/weather-app-deployment \
            weather-app=$IMAGE_TAG -n weather-app
          kubectl rollout status deployment/weather-app-deployment -n weather-app --timeout=90s
          kubectl get svc -n weather-app

  # -------------------------
  # Notifications
  # -------------------------
  notify:
    runs-on: ubuntu-latest
    needs: [code-quality, build-and-push, deploy]
    if: always()
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v4
        with:
          status: ${{ job.status }}
          channel: '#ci-cd-notifications'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
